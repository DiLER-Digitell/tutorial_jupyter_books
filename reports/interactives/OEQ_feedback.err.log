Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML

open_ended_data = [
    {
        "prompt": "Which year was the original Portal first released?",
        "answer": ["2007"],
        "feedback_correct": "Correct! Portal was originally released in 2007.",
        "feedback_incorrect": "Incorrect. The correct answer is 2007."
    },
    {
        "prompt": "Portal was built using which engine?",
        "answer": ["source", "source engine"],
        "feedback_correct": "Correct! Portal was creatin in Source Engine",
        "feedback_incorrect": "Incorrect. The correct answer is the Source Engine."
    },
    {
        "prompt": "Which game developer created and published Portal?",
        "answer": ["valve"],
        "feedback_correct": "Correct! Valve developed and published Portal.",
        "feedback_incorrect": "Incorrect. The correct answer is Valve."
    },
    {
        "prompt": "Who is the main playable protagnonist in Portal?",
        "answer": ["chell"],
        "feedback_correct": "Correct! The main character is Chell.",
        "feedback_incorrect": "Incorrect! The main character is Chell."
    },
{
        "prompt": "What is the name of the AI antagonist in the Aperture Science facility?",
        "answer": ["glados"],
        "feedback_correct": "Correct! GLaDOS is the AI",
        "feedback_incorrect": "Incorrect. The correct answer is GLaDOS."
    }
]
custom_css = HTML("""
<style>
    .questions-container {
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 5px;
        background: linear-gradient(to bottom, #fafafa 0%, #ffffff 100%);
    }

    .question-row {
        margin: 15px 0;
    }

    .feedback-card {
        border: 1px solid #ccc;
        background: #fefefe;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
        box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1);
    }
    .feedback-error {
        border: 1px solid #d9534f !important;
        background: #f9f1f0 !important;
        color: #d9534f !important;
    }

    .feedback-correct {
        border: 1px solid #5cb85c !important;
        background: #f0fff0 !important;
        color: #3c763d !important;
    }
    .feedback-incorrect {
        border: 1px solid #d9534f !important;
        background: #f9f1f0 !important;
        color: #d9534f !important;
    }

    .feedback-card h4 {
        margin-top: 0;
        color: #2c3e50;
    }
</style>
""")

question_widgets = []
for q in open_ended_data:
    prompt_html = widgets.HTML(
        value=f"<b>{q['prompt']}</b>"
    )
    text_input = widgets.Text(
        value='',
        placeholder='Type your answer here...',
        layout=widgets.Layout(width='300px')
    )
    question_box = widgets.VBox([prompt_html, text_input])
    question_box.add_class("question-row")
    question_widgets.append((question_box, text_input, q))

questions_box = widgets.VBox([qw[0] for qw in question_widgets])
questions_box.add_class("questions-container")
feedback_output = widgets.Output()
submit_button = widgets.Button(description="Submit", button_style='success')
retake_button = widgets.Button(description="Retake", button_style='warning')

def on_submit_click(_):
    with feedback_output:
        clear_output()
        display(HTML("<h2 style='color: #444; margin-bottom:10px;'>Your Results</h2>"))
        score = 0
        total = len(question_widgets)

        for (question_box, text_input, q_data) in question_widgets:
            user_answer = text_input.value.strip()
            correct_answers = [ans.strip().lower() for ans in q_data["answer"]]

            if not user_answer:
                display(HTML(f"""
                <div class="feedback-card feedback-error">
                    <h4>{q_data['prompt']}</h4>
                    <p><strong>No answer provided.</strong> Please type your response.</p>
                </div>
                """))
                continue

            if user_answer.lower() in correct_answers:
                score += 1
                display(HTML(f"""
                <div class="feedback-card feedback-correct">
                    <h4>{q_data['prompt']}</h4>
                    <p><em>You answered:</em> <strong>{user_answer}</strong></p>
                    <p>{q_data['feedback_correct']}</p>
                </div>
                """))
            else:
                display(HTML(f"""
                <div class="feedback-card feedback-incorrect">
                    <h4>{q_data['prompt']}</h4>
                    <p><em>You answered:</em> <strong>{user_answer}</strong></p>
                    <p>{q_data['feedback_incorrect']}</p>
                </div>
                """))

        display(HTML(f"<h3>Your Score: {score}/{total}</h3>"))

def on_retake_click(_):
    with feedback_output:
        clear_output()
    # Reset all text fields
    for (question_box, text_input, q_data) in question_widgets:
        text_input.value = ""

submit_button.on_click(on_submit_click)
retake_button.on_click(on_retake_click)

buttons_box = widgets.HBox([submit_button, retake_button])

display(custom_css)
display(questions_box, buttons_box, feedback_output)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[1], line 1[0m
[0;32m----> 1[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mipywidgets[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mwidgets[39;00m
[1;32m      2[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01mIPython[39;00m[38;5;21;01m.[39;00m[38;5;21;01mdisplay[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m display, clear_output, HTML
[1;32m      4[0m open_ended_data [38;5;241m=[39m [
[1;32m      5[0m     {
[1;32m      6[0m         [38;5;124m"[39m[38;5;124mprompt[39m[38;5;124m"[39m: [38;5;124m"[39m[38;5;124mWhich year was the original Portal first released?[39m[38;5;124m"[39m,
[0;32m   (...)[0m
[1;32m     34[0m     }
[1;32m     35[0m ]

[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'

